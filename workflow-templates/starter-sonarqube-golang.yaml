# This workflow is a general suggestion how to scan golang with sonarqube
# Feel free to change and modify the workflow to meet your needs
# This Workflow is under "You Build it you Run it" agreement
# Bug reports and feature requests for the base template -> SnowSoftwareGlobal/.github repository
on:
  pull_request:
    types: [ opened, synchronize, reopened ]
    paths:
      - "**/*.go"
  push:
    branches:
      - 'main'
      - 'master'
      - 'develop'
      - 'release'
    paths:
      - "**/*.go"

name: SonarQube Scan - Golang
run-name: Scan - ${{ github.event.head_commit.message }}
jobs:
  sonarqube:
    runs-on: [self-hosted, linux, sonarqube]
    steps:
      - name: Generate token for dependency fetching
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID_READ_ALL_REPOS }}
          installation_id: ${{ secrets.APP_INSTALLATION_ID_READ_ALL_REPOS }}
          private_key: ${{ secrets.APP_PEM_FILE_READ_ALL_REPOS }}

      - uses: actions/checkout@v3
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
          persist-credentials: true
          token: ${{ steps.generate_token.outputs.token }}

      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.17.0'
  
      - name: Generate Code Coverage report
        env:
          READ_ALL_REPOS_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          git config --global url."https://${READ_ALL_REPOS_TOKEN}@github.com/".insteadOf "https://github.com/"
          go env -w GOPRIVATE=github.com/snowsoftwareglobal
          go mod download
          go test -coverprofile=coverage.out     

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v1.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ github.event.repository.name }}
            -Dsonar.projectName=${{ github.event.repository.name }}
            -Dsonar.go.coverage.reportPaths="coverage.out"
