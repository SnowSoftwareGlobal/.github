# This workflow is a general suggestion how to scan golang with sonarqube
# Feel free to change and modify the workflow to meet your needs
# This Workflow is under "You Build it you Run it" agreement
# Bug reports and feature requests for the base template -> SnowSoftwareGlobal/.github repository
on:
  pull_request:
    types: [ opened, synchronize, reopened ]
    paths:
      - "**/*.go"
  push:
    branches:
      - 'main'
      - 'master'
      - 'develop'
      - 'release'
    paths:
      - "**/*.go"

name: SonarQube Scan - Golang
run-name: Scan - ${{ github.event.head_commit.message }}
jobs:
  sonarqube:
    runs-on: [self-hosted, linux, sonarqube]
    container: golang:1.20
    steps:
      # Add ssh-key with read-access to all SnowSoftwareGlobal repositories
      - uses: webfactory/ssh-agent@v0.7.0
        with:
            ssh-private-key: ${{ secrets.SSH_READ_ALL }}

      - uses: actions/checkout@v3
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
  
      - name: Generate Code Coverage report
        run: |
          # Use ssh with the read-all key instead of https
          git config --global --add url."git@github.com:".insteadOf "https://github.com/"
          go env -w GOPRIVATE=github.com/snowsoftwareglobal
          go mod download
          go test -coverprofile=coverage.out     

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v1.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ github.event.repository.name }}
            -Dsonar.projectName=${{ github.event.repository.name }}
            -Dsonar.go.coverage.reportPaths="coverage.out"
