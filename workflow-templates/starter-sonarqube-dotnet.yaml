# This workflow is a general suggestion how to scan c# with sonarqube
# Feel free to change and modify the workflow to meet your needs
# This Workflow is under "You Build it you Run it" agreement
# Bug reports and feature requests for the base template -> SnowSoftwareGlobal/.github repository

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
    paths:
      - "**/*.cs"
  push:
    branches:
      - 'main'
      - 'master'
      - 'develop'
      - 'release'
    paths:
      - "**/*.cs"

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: ${{ secrets.VSS_NUGET_EXTERNAL_FEED_ENDPOINTS }}
  NUGET_PACKAGE_REGISTRY_URL: ${{ secrets.NUGET_PACKAGE_REGISTRY_URL }} 
      

name: SonarQube Scan - Dotnet
run-name: Scan - ${{ github.event.head_commit.message }}
jobs:
  sonarqube:
    runs-on: [self-hosted, linux, sonarqube]
    container: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Download Dependencies
        id: c-sharp
        run: |
          apt-get update && apt-get -y -q install openjdk-11-jre-headless
          dotnet tool install -g dotnet-sonarscanner
          dotnet tool install -g dotnet-coverage

          # Appending GITHUB_PATH doesn't effect current step https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-system-path
          export PATH="$PATH:/root/.dotnet/tools"
          export PATH="$PATH:/github/home/.dotnet/tools"
          echo "/root/.dotnet/tools" >> $GITHUB_PATH
          echo "/github/home/.dotnet/tools" >> $GITHUB_PATH

          # Azure Artifacts auth
          wget -qO- https://aka.ms/install-artifacts-credprovider.sh | bash

      - name: SonarQube Begin - PR
        if: github.event_name == 'pull_request'
        run: |
          dotnet-sonarscanner begin \
            /d:sonar.host.url="$SONAR_HOST_URL" \
            /k:"${{ github.event.repository.name }}" \
            /d:sonar.login="$SONAR_TOKEN" \
            /d:sonar.verbose=true \
            /d:sonar.pullrequest.key="${{ github.event.pull_request.number }}" \
            /d:sonar.pullrequest.branch="$GITHUB_HEAD_REF" \
            /d:sonar.pullrequest.base="$GITHUB_BASE_REF" \
            /d:sonar.cs.vscoveragexml.reportsPaths=/root/project/code-coverage/coverage.xml \
            /d:sonar.cs.vstest.reportsPaths=/root/project/test-results/*.trx \
            /d:sonar.sources=src/ \
            /d:sonar.exclusions=src/*Tests/ \
            /d:sonar.tests=src/ \
            /d:sonar.test.inclusions=src/*Tests/

      #  /d:sonar.branch.name instead of the /d:sonar.pullrequest.* keys need to be set instead
      - name: SonarQube Begin - Push
        if: github.event_name == 'push'
        run: |
          dotnet-sonarscanner begin \
            /d:sonar.host.url="$SONAR_HOST_URL" \
            /k:"${{ github.event.repository.name }}" \
            /d:sonar.login="$SONAR_TOKEN" \
            /d:sonar.verbose=true \
            /d:sonar.branch.name="${GITHUB_REF#refs/heads/}" \
            /d:sonar.cs.vscoveragexml.reportsPaths=/root/project/code-coverage/coverage.xml \
            /d:sonar.cs.vstest.reportsPaths=/root/project/test-results/*.trx \
            /d:sonar.sources=src/ \
            /d:sonar.exclusions=src/*Tests/ \
            /d:sonar.tests=src/ \
            /d:sonar.test.inclusions=src/*Tests/

      - name: Dotnet Build
        run: |
          dotnet build src --source $NUGET_PACKAGE_REGISTRY_URL 

      - name: Dotnet Test
        run: |
          dotnet-coverage collect 'dotnet test src --logger "trx" --results-directory:"test-results"' -f xml -o '/root/project/code-coverage/coverage.xml'

      - name: SonarQube End
        if: always()
        run: |
          dotnet-sonarscanner end /d:sonar.login="$SONAR_TOKEN"
